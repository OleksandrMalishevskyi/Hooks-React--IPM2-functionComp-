{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacters","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","display","width","height","objectFit","margin","img"],"mappings":"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","file":"static/js/4.3aa72f2b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacters, clearError} = useMarvelService();\n  \n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacters(id)\n            .then(onCharLoaded);\n    }\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n\n        setCharList(charList => [...charList,  ...newCharList])\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\" >\n                    <li \n                        \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items} \n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n\n\n        \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading,error,getCharacters, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacters(charId)\n            .then(onCharLoaded)\n    }\n  \n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    \n                    {\n                        comics.map((item, i) => {\n                            if (i > 9) return;\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;"],"sourceRoot":""}